complete_data
missing_data = data_T_3_fare[!complete.cases(data_T_3_fare), -4]
missing_data
View(data_T_3)
missing_data = data_T_3_fare[!complete.cases(data_T_3_fare), -4]
missing_data
View(missing_data)
library(kknn)
View(data_T_3_fare)
View(missing_data)
View(complete_data)
data_T_3_fare.1nnmanhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
data_T_3_fare.1nnmanhattan = kknn(age ~ ., complete_data, missing_data, k = 1, distance = 1)
data_T_3_fare.1nnmanhattan
data_T_3_fare.1nnmanhattan = kknn(age ~ ., complete_data, missing_data, k = 1, distance = 1)
data_T_3_fare.1nneuclidean = kknn(age ~ ., complete_data, missing_data, k = 1, distance = 2)
data_T_3_fare.1nnminkowski10 = kknn(age ~ ., complete_data, missing_data, k = 1, distance = 10)
plot(density(complete_data$age))
plot(density(complete_data$age))
lines(density(data_T_3_fare.1nnmanhattan$fitted.values), col = 'red')
lines(density(data_T_3_fare.1nneuclidean$fitted.values), col = 'blue')
lines(density(data_T_3_fare.1nnminkowski10$fitted.values), col = 'green')
plot(density(complete_data$age),main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
plot(density(complete_data$age),main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(data_T_3_fare.1nnmanhattan$fitted.values), col = 'red')
lines(density(data_T_3_fare.1nneuclidean$fitted.values), col = 'blue')
lines(density(data_T_3_fare.1nnminkowski10$fitted.values), col = 'green')
plot(density(complete_data$age),main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 1))
legend("topright", c("Original","Manhattan", "Euclidean", "p = 10" ),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 1))
lines(density(data_T_3_fare.1nnmanhattan$fitted.values), col = 'red')
plot(density(complete_data$age),main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(data_T_3_fare.1nnmanhattan$fitted.values), col = 'red')
lines(density(data_T_3_fare.1nneuclidean$fitted.values), col = 'blue')
lines(density(data_T_3_fare.1nnminkowski10$fitted.values), col = 'green')
legend("topright", c("Original","Manhattan", "Euclidean", " Minkowski 0" ),
col = c("black","red", "blue", "green"), lwd = 1, lty = c(1, 1, 1, 1))
plot(density(complete_data$age),main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
legend("topright", c("Original","Manhattan", "Euclidean", " Minkowski 0" ),
col = c("black","red", "blue", "green"), lwd = 1, lty = c(1, 1, 1, 1))
lines(density(data_T_3_fare.1nnmanhattan$fitted.values), col = 'red')
lines(density(data_T_3_fare.1nneuclidean$fitted.values), col = 'blue')
lines(density(data_T_3_fare.1nnminkowski10$fitted.values), col = 'green')
data_T_3_fare.36nnmanhattan = kknn(age ~ ., complete_data, missing_data, k = 36, distance = 1)
# b. Euclidean distance.
data_T_3_fare.36nneuclidean = kknn(age ~ ., complete_data, missing_data, k = 36, distance = 2)
# c. Minkowski distance with p = 10 .
data_T_3_fare.36nnminkowski10 = kknn(age ~ ., complete_data, missing_data, k = 36,
distance = 10)
plot(density(complete_data$age),main = "Minkowski Imputation for Age\36 Nearest Neighbor")
lines(density(data_T_3_fare.36nnmanhattan$fitted.values), col = 'red')
lines(density(data_T_3_fare.36nneuclidean$fitted.values), col = 'blue')
lines(density(data_T_3_fare.36nnminkowski10$fitted.values), col = 'green')
legend("topright", c("Original","Manhattan", "Euclidean", " Minkowski 0" ),
col = c("black","red", "blue", "green"), lwd = 1, lty = c(1, 1, 1, 1))
library(HSAUR)
install.packages("HSAUR")
library(HSAUR)
data("heptathlon")
?heptathlon
View("heptathlon")
hep = heptathlon
hep = heptathlon
str(hep)
View(heptathlon)
hept = heptathlon
str(hept)
plot(hept)
View(hept)
hep = hept %>%
mutate(hurdles_trans = max(hurdles) - hurdles)
hep = hept %>%
mutate(run200_trans = max(run200m) - run200m)
hep = hept %>%
mutate(run800_trans = max(run800m) - run800m)
library(dplyr)
hep = hept %>%
mutate(hurdles_trans = max(hurdles) - hurdles)
hep = hept %>%
mutate(run200_trans = max(run200m) - run200m)
hep = hept %>%
mutate(run800_trans = max(run800m) - run800m)
hept = hept %>%
mutate(hurdles_trans = max(hurdles) - hurdles)
hept = hept %>%
mutate(run200_trans = max(run200m) - run200m)
hept = hept %>%
mutate(run800_trans = max(run800m) - run800m)
hept_reduced = hept[ , -c(1,4,7,8)]
View(hept_reduced)
library(car)
hept_reduced = hept[ , -c(1,4,7,8)]
View(hept_reduced)
scatterplotMatrix(hept_reduced)
View(hept_reduced)
library(psych)
library(stats)
?cor
fa.parallel(hept_reduced,
fa = "pc",
n.iter = 100)
abline(h=1)
pc_hept = principal(hep.cor,
nfactors =2, #The number of PCs to extract.
rotate = "none")
pc_hept
pc_hept = principal(hept_reduced,
nfactors =2, #The number of PCs to extract.
rotate = "none")
pc_hept
factor.plot(pc_hept,
labels = colnames(hept_reduced)
)
colnames(hept)
plot(hept) #original dimensions
plot(pc_hept$scores) #reduced dimensions
plot(hept) #original dimensions
plot(pc_hept$scores) #reduced dimensions
library(flexclust) #Loading the flexclust library.
data(nutrient) #Loading the nutrient data.
help(nutrient) #Inspecting the data set; nutrients in meat, fish, and fowel.
nutrient
#Notice that the nutrient columns are in different measurements: calories,
#grams, and milligrams.
summary(nutrient)
sapply(nutrient, sd)
#We should scale the data.
nutrient.scaled = as.data.frame(scale(nutrient))
summary(nutrient.scaled)
sapply(nutrient.scaled, sd)
#We need to calcualte the pairwise distances between observations.
d = dist(nutrient.scaled)
d
#Using the hclust() function, we
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
par(mfrow = c(1, 3))
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
clusters.average = cutree(fit.average, k = 5)
clusters.average
table(clusters.average)
aggregate(nutrient, by = list(cluster = clusters.average), median)
aggregate(nutrient.scaled, by = list(cluster = clusters.average), median)
par(mfrow = c(1, 1))
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage\n5 Clusters")
rect.hclust(fit.average, k = 5)
library(ISLR)
library(tree)
View(OJ)
help(OJ)
str(OJ)
summary(OJ)
set.seed(0)
train = sample(1:nrow(OJ), 8*nrow(OJ)/10)
OJ.train = OJ[train,]
OJ.test=OJ[-train,]
OJ.tree=tree(Purchase ~ ., split='gini',OJ.train)
OJ.tree
summary(OJ.tree)
OJ.tree.pred = predict(OJ.tree , OJ.test, type='class')
table(OJ.tree.pred, OJ.test$Purchase)
par(mfrow = c(1, 2))
plot(OJ.cv$size, OJ.cv$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(OJ.cv$k, OJ.cv$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
shiny::runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Samriddhi_Twitter_Analysis')
install.packages("wordcloud2")
?wordcloud2
??wordcloud2
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Samriddhi_Twitter_Analysis')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Trulia')
load("C:/Users/Samriddhi/Desktop/NYCDataScience/MachineLearning/HiggsBoson/share_4.RData")
View(Chales_train_remove)
library(caret)
set.seed(0)
source('Jumpstart_helper.R')
library(pROC)
View(Chales_test_remove)
View(Chales_test_remove_imputed)
names(Chales_train_remove)
Label_chales =dfTrain[rownames(Chales_train_remove),33] #label b s
weight_chales = dfTrain[rownames(Chales_train_remove),32]
weight_chales
Label_chales
controlObject2 = trainControl(summaryFunction = twoClassSummary,
method = "repeatedcv",
classProbs = T,
repeats = 5,
number = 10)
GLM1_chales = train( x = Chales_train_remove,  y = Label_chales,
# Label ~ . - ID,
# data = Sam_train_remove_imputed_label,
weights = weight_chales,
method = 'glm',
family = 'binomial',
metric = 'ROC', #AMS before
trControl = controlObject2)
confusionMatrix(data = GLM1_chales$pred$pred, reference = GLM1_chales$pred$obs)
a= predict(GLM1_chales,Chales_train_remove)
confusionMatrix(data = a, reference = as.factor(Label_chales))
b= predict(GLM1_Sam,Sam_train_remove_imputed)
confusionMatrix(data = b, reference = as.factor(Label_sam))
GLM1_Sam = train( x = Sam_train_remove_imputed,  y = Label_sam,
# Label ~ . - ID,
# data = Sam_train_remove_imputed_label,
# weights = weight_sam,
method = 'glm',
family = 'binomial',
metric = 'ROC', #AMS before
trControl = controlObject2)
Label_sam =dfTrain[rownames(Sam_train_remove_imputed),33] #label b s
weight_sam = dfTrain[rownames(Sam_train_remove_imputed),32]
controlObject2 = trainControl(summaryFunction = twoClassSummary,
method = "repeatedcv",
classProbs = T,
repeats = 5,
number = 10)
GLM1_Sam = train( x = Sam_train_remove_imputed,  y = Label_sam,
# Label ~ . - ID,
# data = Sam_train_remove_imputed_label,
# weights = weight_sam,
method = 'glm',
family = 'binomial',
metric = 'ROC', #AMS before
trControl = controlObject2)
GLM1_Sam = train( x = Sam_train_remove_imputed,  y = Label_sam,
# weights = weight_sam,
method = 'glm',
family = 'binomial',
metric = 'ROC', #AMS before
trControl = controlObject2)
GLM1_Sam = train( x = Sam_train_remove_imputed,  y = Label_sam,
# weights = weight_sam,
method = 'glm',
family = 'binomial',
metric = 'ROC',
trControl = controlObject2)
Label_sam =dfTrain[rownames(Sam_train_remove_imputed),33] #label b s
weight_sam = dfTrain[rownames(Sam_train_remove_imputed),32]
controlObject2 = trainControl(summaryFunction = twoClassSummary,
method = "repeatedcv",
classProbs = T,
repeats = 5,
number = 10)
GLM1_Sam = train( x = Sam_train_remove_imputed,  y = Label_sam,
# weights = weight_sam,
method = 'glm',
family = 'binomial',
metric = 'ROC',
trControl = controlObject2)
Label_sam =dfTrain[rownames(Sam_train_remove_imputed),33] #label b s
weight_sam = dfTrain[rownames(Sam_train_remove_imputed),32]
controlObject2 = trainControl(summaryFunction = twoClassSummary,
method = "repeatedcv",
classProbs = T,
repeats = 5,
number = 10)
GLM1_Sam = train( x = Sam_train_remove_imputed,  y = Label_sam,
# weights = weight_sam,
method = 'glm',
family = 'binomial',
metric = 'ROC',
trControl = controlObject2)
Label_chales =dfTrain[rownames(Chales_train_remove),33] #label b s
weight_chales = dfTrain[rownames(Chales_train_remove),32]
GLM1_chales = train( x = Chales_train_remove,  y = Label_chales,
# Label ~ . - ID,
# data = Sam_train_remove_imputed_label,
weights = weight_chales,
method = 'glm',
family = 'binomial',
metric = 'ROC', #AMS before
trControl = controlObject2)
Label_joshua =dfTrain[rownames(Joshua_train_remove_imputed),33] #label b s
weight_joshua = dfTrain[rownames(Joshua_train_remove_imputed),32]
GLM1_Joshua = train( x = Joshua_train_remove_imputed,  y = Label_joshua,
# Label ~ . - ID,
# data = Sam_train_remove_imputed_label,
weights = weight_joshua,
method = 'glm',
family = 'binomial',
metric = 'ROC', #AMS before
trControl = controlObject2)
load("C:/Users/Samriddhi/Desktop/NYCDataScience/MachineLearning/HiggsBoson/Boosting_Final0829.RData")
Sam_gbm
load("C:/Users/Samriddhi/Desktop/NYCDataScience/MachineLearning/HiggsBoson/share_4.RData")
?corrplot
library(corrplot)
View(Joshua_train_remove)
mcor = cor(Joshua_train_remove[,-1], Joshua_train_remove$DER_mass_MMC, use="pairwise.complete.obs")
lapply(Joshua_train_remove, class)
names(Joshua_train_remove)
mcor = cor(Joshua_train_remove[,-c(1,19)], Joshua_train_remove$DER_mass_MMC, use="pairwise.complete.obs")
corrplot(mcor, type="lower", tl.col="black",
method = "ellipse")
?corrplot
corrplot(mcor, type="lower", tl.col="black",
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles")
corrplot(mcor, type="lower", tl.col="black",
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles",addgrid.col = "color" )
corrplot(mcor, type="lower", tl.col="black",
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black", t1.cex = "4"
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black", t1.cex = 2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black", t1.cex = 1,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 2, tl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 2, tl.cex=1,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=1,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.5,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
c1.pos = "r"
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
c1.pos = "b"
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.lim=c(10,100),cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
mcor = cor(Joshua_train_remove$DER_mass_MMC, Joshua_train_remove[,-c(1,19)],  use="pairwise.complete.obs")
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
mcor = cor(Joshua_train_remove[,-c(1,19)], Joshua_train_remove$DER_mass_MMC, use="pairwise.complete.obs")
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" ,
type = "upper", tl.pos = "td",
method = "circle",
order = "hclust", diag = FALSE)
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" ,
type = "upper", tl.pos = "td",
order = "hclust", diag = FALSE)
corrplot(mcor,  tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" ,
type = "upper", tl.pos = "td",
order = "hclust", diag = FALSE)
corrplot(mcor,  tl.col="black",  tl.offset = 1, tl.cex=0.8,
cl.cex=2,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" ,
type = "upper", tl.pos = "td",
diag = FALSE)
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',
order = "hclust", diag = FALSE)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',
diag = FALSE)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',
)
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,tl.pos = "td",
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="lower", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="upper", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type="full", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
mcor = cor(Joshua_train_remove, use="pairwise.complete.obs")
mcor = cor(Joshua_train_remove[, -19], use="pairwise.complete.obs")
corrplot(mcor, type="full", tl.col="black",  tl.offset = 1, tl.cex=0.8,
method = "ellipse", title = "Coorelation plot of Higgs Mass with other varaibles" )
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',
order = "hclust", diag = FALSE)
corrplot(mcor, type = "lower", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',
order = "hclust", diag = FALSE)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',
order = "hclust", diag = FALSE)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.offset = 1,
order = "hclust", diag = FALSE)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.offset = 1,
order = "hclust")
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.offset = 1, tl.srt=45,
order = "hclust")
corrplot(mcor, type = "lower", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.offset = 1, tl.srt=45,
order = "hclust")
corrplot(mcor, type = "lower",method = "circle" )
corrplot(mcor, type = "lower",method = "circle",tl.cex = 0.5, tl.col = 'black' )
corrplot(mcor, type = "lower",method = "circle",tl.cex = 0.5, tl.col = 'black',
title = "Coorelation plot for number of Jetnum = 0")
corrplot(mcor, type = "lower",method = "circle",tl.cex = 0.5, tl.col = 'black'
)
load("C:/Users/Samriddhi/Desktop/NYCDataScience/MachineLearning/HiggsBoson/Rf_Code_Final.RData")
RF_Train_Sam_Pred <- predict(Sam_rf, newdata=Sam_train_remove_imputed, type="prob")
ROCRpred= prediction(RF_Train_Sam_Pred,Label_sam)
Sam_rf
RF_Train_Sam_Pred <- predict(Sam_rf, newdata=Sam_train_remove_imputed, type="prob")
?predict
ROCRpred2= prediction(RF_Train_Sam_Pred,Label_sam)
head(RF_Train_Sam_Pred)
auc1 = roc(Label_sam, RF_Train_Sam_Pred[,2])
library(pROC)
auc1 = roc(Label_sam, RF_Train_Sam_Pred[,2])
plot(auc1, print.thres=TRUE)
RF_Train_Joshua_Pred <- predict(Joshua_rf_AMS, newdata=Joshua_train_remove_imputed,
type="prob")
auc_sam = roc(Label_sam, RF_Train_Sam_Pred[,2])
plot(auc_sam, print.thres=TRUE)
RF_Train_Joshua_Pred
head(RF_Train_Joshua_Pred)
auc_Joshua = roc(Label_Joshua, RF_Train_Joshua_Pred[,2])
plot(auc_Joshua, print.thres=TRUE)
auc_sam = roc(Label_sam, RF_Train_Sam_Pred[,2])
plot(auc_sam, print.thres=TRUE)
auc_Joshua = roc(Label_Joshua, RF_Train_Joshua_Pred[,2])
plot(auc_Joshua, print.thres=TRUE)
plot(Sam_RF_Var_Imp)
plot(Sam_RF_Var_Imp, title = "hello")
Sam_rf
Joshua_rf_AMS
load("C:/Users/Samriddhi/Desktop/NYCDataScience/MachineLearning/capstone/Rdata/Tables.RData")
Review_user = left_join(DT_review_phoenix, DT_User_phoenix,  by ="user_id")
require(dplyr)
require(data.table)
Review_user = left_join(DT_review_phoenix, DT_User_phoenix,  by ="user_id")
Review_user = Review_user[,-1]
View(Review_user)
names(Review_user)
names(DT_review)
names(DT_User)
names(Review_user)
Review_user %>%
group_by(business_id) %>%
summarise(Avgstar = mean(stars), Avgstars2 = mean(average_stars),
Avgreview = mean(review_count))
head()
top_n()
head(2)
Review_user %>%
group_by(business_id) %>%
summarise(Avgstar = mean(stars), Avgstars2 = mean(average_stars),
Avgreview = mean(review_count))%>%
head(2)
Review_user %>%
group_by(business_id) %>%
summarise(Avgstar = mean(stars), Avgstars2 = mean(average_stars),
Avgreview = mean(review_count))%>%
head(5)
names(DT_review_phoenix)
names(DT_User_phoenix)
shiny::runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
tags$div(class = "header", checked = NA,
tags$p("Ready to take the Shiny tutorial? If so"),
tags$a(href = "shiny.rstudio.com/tutorial", "Click Here!")
)
tags$div(class = "header", checked = NA,
tags$p("Ready to take the Shiny tutorial? If so"),
tags$a(href = "shiny.rstudio.com/tutorial", "Click Here!")
)
tags$div(class = "container",
img(src="images/yelp.png", height = 500, width = 500),
img(src="images/yelp.png", height = 500, width = 500)
)
tags$div(class = "container",
img(src="img/example-slide-1.jpg", alt="Photo by: Missy S Link: http://www.flickr.com/photos/listenmissy/5087404401/", height = 500, width = 500),
img(src="img/example-slide-2.jpg", alt="Photo by: Daniel Parks Link: http://www.flickr.com/photos/parksdh/5227623068/", height = 500, width = 500)
)
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
shiny::runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
shiny::runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
runApp('C:/Users/Samriddhi/Desktop/R_Folder/Shiny/Yelp')
